require('dotenv').config();

const fetch = require('node-fetch');

//get bearer token
const url = 'https://api.shopmonkey.io/v2/token';
const keyInfo = {
    method: 'POST',
    headers: { Accept: 'text/html', 'Content-Type': 'application/json' },
    body: JSON.stringify({ publicKey: process.env.PUBLICKEY_SHOPMONKEY, privateKey: process.env.PRIVATEKEY_SHOPMONKEY })
};



//get order
const urlGetOrder = 'https://api.shopmonkey.io/v2/orders';


//get customer
const urlGetCustomer = 'https://api.shopmonkey.io/v2/customers';
const bodyGetCustomer = {
    sort: "creationDate",
    offset: "0",
    limit: "50",
    includeShopmonkeyCustomers: true,
    //customer phont number
    phone: "%2B12256360000" //+12256360000
}





fetch(url, keyInfo)
    //generate a new bearer token
    .then(res => res.text())
    .then(bearer => {
        //pass bearer token to two different option objects

        //get method option
        const getOptions = {
            method: 'GET',
            headers: {
                Accept: 'application/json',
                Authorization: `Bearer ${bearer}`
            }
        };
        //put method option
        const putOptions = {
            method: 'PUT',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                Authorization: `Bearer ${bearer}`
            }
        };
        //fetch user with the specified phone number
        fetch(constructUrl(urlGetCustomer, bodyGetCustomer), getOptions)
            .then(res => res.json())
            .then(json => {
                //if the "id" property is null
                if (json[0].id == null) {
                    //construct the user url with shopmonkeyId
                    const urlPutCustomerInfo = `https://api.shopmonkey.io/v2/customers/${json[0].shopmonkeyId}`;
                    //add the body property to the putOptions object with a randon id generated by the function id()
                    putOptions['body'] = JSON.stringify({
                        id: id()
                    });
                    //update user's information with a fetch put request
                    fetch(urlPutCustomerInfo, putOptions)
                        .then(res => res.json())
                        .then(json => console.log(json))
                        .catch(err => console.log(err))

                }
                //if the "id" property not null
                else {
                    //create a get option to retrieve the associate orders with that id
                    const bodyGetOrder = {
                        customerId: `${json[0].id}`,
                        limit: '50',
                        offset: '0',
                        sort: 'creationDate',
                    }
                    //retrieve the orders associated with the requested user
                    fetch(constructUrl(urlGetOrder, bodyGetOrder), getOptions)
                        .then(res => res.json())
                        .then(json => {
                            console.log(json)
                        })
                        .catch(err => console.error('error:' + err));
                }
            })
            .catch(err => console.error('error:' + err));
    })
    .catch(err => console.error('error: ' + err));



//URL constructor to ease the process of generating the necessary url for the fetch requests
const constructUrl = (url, params) => {
    let URL = url + "?";
    for (i = 0; i < Object.keys(params).length; i++) {
        URL += "&" + `${Object.keys(params)[i]}=${params[Object.keys(params)[i]]}`
    }
    return URL;
}
//random id string generator for id assignment
function id() {
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
}